package ember.qualitycommands.client.mixin;

import net.minecraft.client.render.FogShape;
import com.google.common.collect.Lists;
import com.mojang.blaze3d.systems.RenderSystem;
import net.minecraft.util.math.MathHelper;
import java.util.List;
import net.minecraft.client.render.Camera;
import net.minecraft.client.render.BackgroundRenderer;
import net.minecraft.entity.effect.StatusEffect;
import net.minecraft.entity.effect.StatusEffectInstance;
import net.minecraft.entity.effect.StatusEffects;
import net.minecraft.entity.effect.StatusEffectInstance.FactorCalculationData;
import net.minecraft.entity.LivingEntity;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.gen.Accessor;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.Mutable;
import org.spongepowered.asm.mixin.injection.Constant;
import org.spongepowered.asm.mixin.injection.ModifyConstant;
import org.spongepowered.asm.mixin.injection.ModifyVariable;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
import net.minecraft.block.AirBlock;
import net.minecraft.entity.Entity;
import net.minecraft.util.math.Vec3d;
import net.minecraft.entity.MovementType;
import ember.qualitycommands.ModEffects;
@Mixin(BackgroundRenderer.class)
public class BackgroundRenderMixin{
    @Accessor("FOG_MODIFIERS")
    public static void setFogModifiers(List<BackgroundRenderer.StatusEffectFogModifier> FOG_MODIFIERS){
        throw new AssertionError();
    };
    @Mutable
    @Accessor("FOG_MODIFIERS")
    public static List<BackgroundRenderer.StatusEffectFogModifier> getFogModifiers() {
        throw new AssertionError();
    }
    /*public static void applyFog(Camera camera, BackgroundRenderer.FogType fogType, float viewDistance, boolean thickFog, float tickDelta) {
		CameraSubmersionType cameraSubmersionType = camera.getSubmersionType();
		Entity entity = camera.getFocusedEntity();
		BackgroundRenderer.FogData fogData = new BackgroundRenderer.FogData(fogType);
		BackgroundRenderer.StatusEffectFogModifier statusEffectFogModifier = getFogModifier(entity, tickDelta);
		if (cameraSubmersionType == CameraSubmersionType.LAVA) {
			if (entity.isSpectator()) {
				fogData.fogStart = -8.0F;
				fogData.fogEnd = viewDistance * 0.5F;
			} else if (entity instanceof LivingEntity && ((LivingEntity)entity).hasStatusEffect(StatusEffects.FIRE_RESISTANCE)) {
				fogData.fogStart = 0.0F;
				fogData.fogEnd = 3.0F;
			} else {
				fogData.fogStart = 0.25F;
				fogData.fogEnd = 1.0F;
			}
		} else if (cameraSubmersionType == CameraSubmersionType.POWDER_SNOW) {
			if (entity.isSpectator()) {
				fogData.fogStart = -8.0F;
				fogData.fogEnd = viewDistance * 0.5F;
			} else {
				fogData.fogStart = 0.0F;
				fogData.fogEnd = 2.0F;
			}
		} else if (statusEffectFogModifier != null) {
			LivingEntity livingEntity = (LivingEntity)entity;
			StatusEffectInstance statusEffectInstance = livingEntity.getStatusEffect(statusEffectFogModifier.getStatusEffect());
			if (statusEffectInstance != null) {
				statusEffectFogModifier.applyStartEndModifier(fogData, livingEntity, statusEffectInstance, viewDistance, tickDelta);
			}
		} else if (cameraSubmersionType == CameraSubmersionType.WATER) {
			fogData.fogStart = -8.0F;
			fogData.fogEnd = 96.0F;
			if (entity instanceof ClientPlayerEntity clientPlayerEntity) {
				fogData.fogEnd = fogData.fogEnd * Math.max(0.25F, clientPlayerEntity.getUnderwaterVisibility());
				RegistryEntry<Biome> registryEntry = clientPlayerEntity.getWorld().getBiome(clientPlayerEntity.getBlockPos());
				if (registryEntry.isIn(BiomeTags.HAS_CLOSER_WATER_FOG)) {
					fogData.fogEnd *= 0.85F;
				}
			}

			if (fogData.fogEnd > viewDistance) {
				fogData.fogEnd = viewDistance;
				fogData.fogShape = FogShape.CYLINDER;
			}
		} else if (thickFog) {
			fogData.fogStart = viewDistance * 0.05F;
			fogData.fogEnd = Math.min(viewDistance, 192.0F) * 0.5F;
		} else if (fogType == BackgroundRenderer.FogType.FOG_SKY) {
			fogData.fogStart = 0.0F;
			fogData.fogEnd = viewDistance;
			fogData.fogShape = FogShape.CYLINDER;
		} else {
			float f = MathHelper.clamp(viewDistance / 10.0F, 4.0F, 64.0F);
			fogData.fogStart = viewDistance - f;
			fogData.fogEnd = viewDistance;
			fogData.fogShape = FogShape.CYLINDER;
		}

		RenderSystem.setShaderFogStart(fogData.fogStart);
		RenderSystem.setShaderFogEnd(fogData.fogEnd);
		RenderSystem.setShaderFogShape(fogData.fogShape);
	}*/
    @Inject(method="applyFog", at=@At("TAIL"))
    public static void applyFog(Camera camera, BackgroundRenderer.FogType fogType, float viewDistance, boolean thickFog, float tickDelta, CallbackInfo info){
        RenderSystem.setShaderFogStart(1.25F);
		RenderSystem.setShaderFogEnd(5);
        
		RenderSystem.setShaderFogShape(FogShape.SPHERE);
    }
    @Shadow
    private static List<BackgroundRenderer.StatusEffectFogModifier> FOG_MODIFIERS=getFogModifiers();
    static{
        BackgroundRenderMixin.FOG_MODIFIERS.add(1,new BackgroundRenderMixin.TransitioningFogModifier());
        setFogModifiers(BackgroundRenderMixin.FOG_MODIFIERS);
    }
    static class TransitioningFogModifier implements BackgroundRenderer.StatusEffectFogModifier {
		@Override
		public StatusEffect getStatusEffect() {
			return StatusEffects.GLOWING;
		}
        @Override
        public boolean shouldApply(LivingEntity entity, float tickDelta) {
			return true;
		}
		@Override
		public void applyStartEndModifier(BackgroundRenderer.FogData fogData, LivingEntity entity, StatusEffectInstance effect, float viewDistance, float tickDelta) {
			float f = effect.isInfinite() ? 5.0F : MathHelper.lerp(Math.min(1.0F, effect.getDuration() / 20.0F), viewDistance, 5.0F);
			if (fogData.fogType == BackgroundRenderer.FogType.FOG_SKY) {
				fogData.fogStart = 0.0F;
				fogData.fogEnd = f * 0.8F;
			} else {
				fogData.fogStart = f * 0.25F;
				fogData.fogEnd = f;
			}
		}
	}
}
